// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class RestrictionsUpdated extends ethereum.Event {
  get params(): RestrictionsUpdated__Params {
    return new RestrictionsUpdated__Params(this);
  }
}

export class RestrictionsUpdated__Params {
  _event: RestrictionsUpdated;

  constructor(event: RestrictionsUpdated) {
    this._event = event;
  }

  get newRestrictionsAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get updatedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }
}

export class PauserAdded extends ethereum.Event {
  get params(): PauserAdded__Params {
    return new PauserAdded__Params(this);
  }
}

export class PauserAdded__Params {
  _event: PauserAdded;

  constructor(event: PauserAdded) {
    this._event = event;
  }

  get addedPauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get addedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PauserRemoved extends ethereum.Event {
  get params(): PauserRemoved__Params {
    return new PauserRemoved__Params(this);
  }
}

export class PauserRemoved__Params {
  _event: PauserRemoved;

  constructor(event: PauserRemoved) {
    this._event = event;
  }

  get removedPauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get removedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AccountLock extends ethereum.Event {
  get params(): AccountLock__Params {
    return new AccountLock__Params(this);
  }
}

export class AccountLock__Params {
  _event: AccountLock;

  constructor(event: AccountLock) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get releaseTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AccountRelease extends ethereum.Event {
  get params(): AccountRelease__Params {
    return new AccountRelease__Params(this);
  }
}

export class AccountRelease__Params {
  _event: AccountRelease;

  constructor(event: AccountRelease) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TimelockerAdded extends ethereum.Event {
  get params(): TimelockerAdded__Params {
    return new TimelockerAdded__Params(this);
  }
}

export class TimelockerAdded__Params {
  _event: TimelockerAdded;

  constructor(event: TimelockerAdded) {
    this._event = event;
  }

  get addedTimelocker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get addedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TimelockerRemoved extends ethereum.Event {
  get params(): TimelockerRemoved__Params {
    return new TimelockerRemoved__Params(this);
  }
}

export class TimelockerRemoved__Params {
  _event: TimelockerRemoved;

  constructor(event: TimelockerRemoved) {
    this._event = event;
  }

  get removedTimelocker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get removedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WhitelistUpdate extends ethereum.Event {
  get params(): WhitelistUpdate__Params {
    return new WhitelistUpdate__Params(this);
  }
}

export class WhitelistUpdate__Params {
  _event: WhitelistUpdate;

  constructor(event: WhitelistUpdate) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get data(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class WhitelisterAdded extends ethereum.Event {
  get params(): WhitelisterAdded__Params {
    return new WhitelisterAdded__Params(this);
  }
}

export class WhitelisterAdded__Params {
  _event: WhitelisterAdded;

  constructor(event: WhitelisterAdded) {
    this._event = event;
  }

  get addedWhitelister(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get addedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WhitelisterRemoved extends ethereum.Event {
  get params(): WhitelisterRemoved__Params {
    return new WhitelisterRemoved__Params(this);
  }
}

export class WhitelisterRemoved__Params {
  _event: WhitelisterRemoved;

  constructor(event: WhitelisterRemoved) {
    this._event = event;
  }

  get removedWhitelister(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get removedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Revoke extends ethereum.Event {
  get params(): Revoke__Params {
    return new Revoke__Params(this);
  }
}

export class Revoke__Params {
  _event: Revoke;

  constructor(event: Revoke) {
    this._event = event;
  }

  get revoker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RevokerAdded extends ethereum.Event {
  get params(): RevokerAdded__Params {
    return new RevokerAdded__Params(this);
  }
}

export class RevokerAdded__Params {
  _event: RevokerAdded;

  constructor(event: RevokerAdded) {
    this._event = event;
  }

  get addedRevoker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get addedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RevokerRemoved extends ethereum.Event {
  get params(): RevokerRemoved__Params {
    return new RevokerRemoved__Params(this);
  }
}

export class RevokerRemoved__Params {
  _event: RevokerRemoved;

  constructor(event: RevokerRemoved) {
    this._event = event;
  }

  get removedRevoker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get removedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnerAdded extends ethereum.Event {
  get params(): OwnerAdded__Params {
    return new OwnerAdded__Params(this);
  }
}

export class OwnerAdded__Params {
  _event: OwnerAdded;

  constructor(event: OwnerAdded) {
    this._event = event;
  }

  get addedOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get addedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnerRemoved extends ethereum.Event {
  get params(): OwnerRemoved__Params {
    return new OwnerRemoved__Params(this);
  }
}

export class OwnerRemoved__Params {
  _event: OwnerRemoved;

  constructor(event: OwnerRemoved) {
    this._event = event;
  }

  get removedOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get removedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class InxIeo__checkLockupResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class InxIeo__whitelistResult {
  value0: boolean;
  value1: string;

  constructor(value0: boolean, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }
}

export class InxIeo extends ethereum.SmartContract {
  static bind(address: Address): InxIeo {
    return new InxIeo("InxIeo", address);
  }

  release(_address: Address, amountToRelease: BigInt): boolean {
    let result = super.call("release", "release(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_address),
      ethereum.Value.fromUnsignedBigInt(amountToRelease)
    ]);

    return result[0].toBoolean();
  }

  try_release(
    _address: Address,
    amountToRelease: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("release", "release(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_address),
      ethereum.Value.fromUnsignedBigInt(amountToRelease)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getRestrictionsAddress(): Address {
    let result = super.call(
      "getRestrictionsAddress",
      "getRestrictionsAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getRestrictionsAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRestrictionsAddress",
      "getRestrictionsAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  detectTransferFromRestriction(
    sender: Address,
    from: Address,
    to: Address,
    amount: BigInt
  ): i32 {
    let result = super.call(
      "detectTransferFromRestriction",
      "detectTransferFromRestriction(address,address,address,uint256):(uint8)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toI32();
  }

  try_detectTransferFromRestriction(
    sender: Address,
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "detectTransferFromRestriction",
      "detectTransferFromRestriction(address,address,address,uint256):(uint8)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTimelocker(account: Address): boolean {
    let result = super.call("isTimelocker", "isTimelocker(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isTimelocker(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isTimelocker", "isTimelocker(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setWhitelist(to: Address, status: boolean, data: string): boolean {
    let result = super.call(
      "setWhitelist",
      "setWhitelist(address,bool,string):(bool)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromBoolean(status),
        ethereum.Value.fromString(data)
      ]
    );

    return result[0].toBoolean();
  }

  try_setWhitelist(
    to: Address,
    status: boolean,
    data: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setWhitelist",
      "setWhitelist(address,bool,string):(bool)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromBoolean(status),
        ethereum.Value.fromString(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(account: Address): boolean {
    let result = super.call("isOwner", "isOwner(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isOwner(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPauser(account: Address): boolean {
    let result = super.call("isPauser", "isPauser(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isPauser(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPauser", "isPauser(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getWhitelistData(_address: Address): string {
    let result = super.call(
      "getWhitelistData",
      "getWhitelistData(address):(string)",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toString();
  }

  try_getWhitelistData(_address: Address): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getWhitelistData",
      "getWhitelistData(address):(string)",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isWhitelister(account: Address): boolean {
    let result = super.call("isWhitelister", "isWhitelister(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isWhitelister(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelister",
      "isWhitelister(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  messageForTransferRestriction(restrictionCode: i32): string {
    let result = super.call(
      "messageForTransferRestriction",
      "messageForTransferRestriction(uint8):(string)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(restrictionCode))]
    );

    return result[0].toString();
  }

  try_messageForTransferRestriction(
    restrictionCode: i32
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "messageForTransferRestriction",
      "messageForTransferRestriction(uint8):(string)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(restrictionCode))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  checkWhitelists(from: Address, to: Address): boolean {
    let result = super.call(
      "checkWhitelists",
      "checkWhitelists(address,address):(bool)",
      [ethereum.Value.fromAddress(from), ethereum.Value.fromAddress(to)]
    );

    return result[0].toBoolean();
  }

  try_checkWhitelists(
    from: Address,
    to: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkWhitelists",
      "checkWhitelists(address,address):(bool)",
      [ethereum.Value.fromAddress(from), ethereum.Value.fromAddress(to)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkLockup(_address: Address): InxIeo__checkLockupResult {
    let result = super.call(
      "checkLockup",
      "checkLockup(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_address)]
    );

    return new InxIeo__checkLockupResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_checkLockup(
    _address: Address
  ): ethereum.CallResult<InxIeo__checkLockupResult> {
    let result = super.tryCall(
      "checkLockup",
      "checkLockup(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new InxIeo__checkLockupResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  whitelist(param0: Address): InxIeo__whitelistResult {
    let result = super.call("whitelist", "whitelist(address):(bool,string)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new InxIeo__whitelistResult(
      result[0].toBoolean(),
      result[1].toString()
    );
  }

  try_whitelist(param0: Address): ethereum.CallResult<InxIeo__whitelistResult> {
    let result = super.tryCall(
      "whitelist",
      "whitelist(address):(bool,string)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new InxIeo__whitelistResult(value[0].toBoolean(), value[1].toString())
    );
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkTimelock(_address: Address, amount: BigInt, balance: BigInt): boolean {
    let result = super.call(
      "checkTimelock",
      "checkTimelock(address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_address),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(balance)
      ]
    );

    return result[0].toBoolean();
  }

  try_checkTimelock(
    _address: Address,
    amount: BigInt,
    balance: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkTimelock",
      "checkTimelock(address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_address),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(balance)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  detectTransferRestriction(from: Address, to: Address, amount: BigInt): i32 {
    let result = super.call(
      "detectTransferRestriction",
      "detectTransferRestriction(address,address,uint256):(uint8)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toI32();
  }

  try_detectTransferRestriction(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "detectTransferRestriction",
      "detectTransferRestriction(address,address,uint256):(uint8)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getWhitelistStatus(_address: Address): boolean {
    let result = super.call(
      "getWhitelistStatus",
      "getWhitelistStatus(address):(bool)",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBoolean();
  }

  try_getWhitelistStatus(_address: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getWhitelistStatus",
      "getWhitelistStatus(address):(bool)",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateTransferRestrictions(_newRestrictionsAddress: Address): boolean {
    let result = super.call(
      "updateTransferRestrictions",
      "updateTransferRestrictions(address):(bool)",
      [ethereum.Value.fromAddress(_newRestrictionsAddress)]
    );

    return result[0].toBoolean();
  }

  try_updateTransferRestrictions(
    _newRestrictionsAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateTransferRestrictions",
      "updateTransferRestrictions(address):(bool)",
      [ethereum.Value.fromAddress(_newRestrictionsAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lock(_address: Address, amount: BigInt, releaseTime: BigInt): boolean {
    let result = super.call("lock", "lock(address,uint256,uint256):(bool)", [
      ethereum.Value.fromAddress(_address),
      ethereum.Value.fromUnsignedBigInt(amount),
      ethereum.Value.fromUnsignedBigInt(releaseTime)
    ]);

    return result[0].toBoolean();
  }

  try_lock(
    _address: Address,
    amount: BigInt,
    releaseTime: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("lock", "lock(address,uint256,uint256):(bool)", [
      ethereum.Value.fromAddress(_address),
      ethereum.Value.fromUnsignedBigInt(amount),
      ethereum.Value.fromUnsignedBigInt(releaseTime)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  revoke(_from: Address, _amount: BigInt): boolean {
    let result = super.call("revoke", "revoke(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_from),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_revoke(_from: Address, _amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("revoke", "revoke(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_from),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRevoker(account: Address): boolean {
    let result = super.call("isRevoker", "isRevoker(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isRevoker(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isRevoker", "isRevoker(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AddTimelockerCall extends ethereum.Call {
  get inputs(): AddTimelockerCall__Inputs {
    return new AddTimelockerCall__Inputs(this);
  }

  get outputs(): AddTimelockerCall__Outputs {
    return new AddTimelockerCall__Outputs(this);
  }
}

export class AddTimelockerCall__Inputs {
  _call: AddTimelockerCall;

  constructor(call: AddTimelockerCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddTimelockerCall__Outputs {
  _call: AddTimelockerCall;

  constructor(call: AddTimelockerCall) {
    this._call = call;
  }
}

export class ReleaseCall extends ethereum.Call {
  get inputs(): ReleaseCall__Inputs {
    return new ReleaseCall__Inputs(this);
  }

  get outputs(): ReleaseCall__Outputs {
    return new ReleaseCall__Outputs(this);
  }
}

export class ReleaseCall__Inputs {
  _call: ReleaseCall;

  constructor(call: ReleaseCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountToRelease(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ReleaseCall__Outputs {
  _call: ReleaseCall;

  constructor(call: ReleaseCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemoveOwnerCall extends ethereum.Call {
  get inputs(): RemoveOwnerCall__Inputs {
    return new RemoveOwnerCall__Inputs(this);
  }

  get outputs(): RemoveOwnerCall__Outputs {
    return new RemoveOwnerCall__Outputs(this);
  }
}

export class RemoveOwnerCall__Inputs {
  _call: RemoveOwnerCall;

  constructor(call: RemoveOwnerCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveOwnerCall__Outputs {
  _call: RemoveOwnerCall;

  constructor(call: RemoveOwnerCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetWhitelistCall extends ethereum.Call {
  get inputs(): SetWhitelistCall__Inputs {
    return new SetWhitelistCall__Inputs(this);
  }

  get outputs(): SetWhitelistCall__Outputs {
    return new SetWhitelistCall__Outputs(this);
  }
}

export class SetWhitelistCall__Inputs {
  _call: SetWhitelistCall;

  constructor(call: SetWhitelistCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get data(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SetWhitelistCall__Outputs {
  _call: SetWhitelistCall;

  constructor(call: SetWhitelistCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class RemovePauserCall extends ethereum.Call {
  get inputs(): RemovePauserCall__Inputs {
    return new RemovePauserCall__Inputs(this);
  }

  get outputs(): RemovePauserCall__Outputs {
    return new RemovePauserCall__Outputs(this);
  }
}

export class RemovePauserCall__Inputs {
  _call: RemovePauserCall;

  constructor(call: RemovePauserCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemovePauserCall__Outputs {
  _call: RemovePauserCall;

  constructor(call: RemovePauserCall) {
    this._call = call;
  }
}

export class AddOwnerCall extends ethereum.Call {
  get inputs(): AddOwnerCall__Inputs {
    return new AddOwnerCall__Inputs(this);
  }

  get outputs(): AddOwnerCall__Outputs {
    return new AddOwnerCall__Outputs(this);
  }
}

export class AddOwnerCall__Inputs {
  _call: AddOwnerCall;

  constructor(call: AddOwnerCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddOwnerCall__Outputs {
  _call: AddOwnerCall;

  constructor(call: AddOwnerCall) {
    this._call = call;
  }
}

export class RemoveWhitelisterCall extends ethereum.Call {
  get inputs(): RemoveWhitelisterCall__Inputs {
    return new RemoveWhitelisterCall__Inputs(this);
  }

  get outputs(): RemoveWhitelisterCall__Outputs {
    return new RemoveWhitelisterCall__Outputs(this);
  }
}

export class RemoveWhitelisterCall__Inputs {
  _call: RemoveWhitelisterCall;

  constructor(call: RemoveWhitelisterCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveWhitelisterCall__Outputs {
  _call: RemoveWhitelisterCall;

  constructor(call: RemoveWhitelisterCall) {
    this._call = call;
  }
}

export class AddPauserCall extends ethereum.Call {
  get inputs(): AddPauserCall__Inputs {
    return new AddPauserCall__Inputs(this);
  }

  get outputs(): AddPauserCall__Outputs {
    return new AddPauserCall__Outputs(this);
  }
}

export class AddPauserCall__Inputs {
  _call: AddPauserCall;

  constructor(call: AddPauserCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddPauserCall__Outputs {
  _call: AddPauserCall;

  constructor(call: AddPauserCall) {
    this._call = call;
  }
}

export class RemoveTimelockerCall extends ethereum.Call {
  get inputs(): RemoveTimelockerCall__Inputs {
    return new RemoveTimelockerCall__Inputs(this);
  }

  get outputs(): RemoveTimelockerCall__Outputs {
    return new RemoveTimelockerCall__Outputs(this);
  }
}

export class RemoveTimelockerCall__Inputs {
  _call: RemoveTimelockerCall;

  constructor(call: RemoveTimelockerCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveTimelockerCall__Outputs {
  _call: RemoveTimelockerCall;

  constructor(call: RemoveTimelockerCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class AddRevokerCall extends ethereum.Call {
  get inputs(): AddRevokerCall__Inputs {
    return new AddRevokerCall__Inputs(this);
  }

  get outputs(): AddRevokerCall__Outputs {
    return new AddRevokerCall__Outputs(this);
  }
}

export class AddRevokerCall__Inputs {
  _call: AddRevokerCall;

  constructor(call: AddRevokerCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddRevokerCall__Outputs {
  _call: AddRevokerCall;

  constructor(call: AddRevokerCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemoveRevokerCall extends ethereum.Call {
  get inputs(): RemoveRevokerCall__Inputs {
    return new RemoveRevokerCall__Inputs(this);
  }

  get outputs(): RemoveRevokerCall__Outputs {
    return new RemoveRevokerCall__Outputs(this);
  }
}

export class RemoveRevokerCall__Inputs {
  _call: RemoveRevokerCall;

  constructor(call: RemoveRevokerCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveRevokerCall__Outputs {
  _call: RemoveRevokerCall;

  constructor(call: RemoveRevokerCall) {
    this._call = call;
  }
}

export class UpdateTransferRestrictionsCall extends ethereum.Call {
  get inputs(): UpdateTransferRestrictionsCall__Inputs {
    return new UpdateTransferRestrictionsCall__Inputs(this);
  }

  get outputs(): UpdateTransferRestrictionsCall__Outputs {
    return new UpdateTransferRestrictionsCall__Outputs(this);
  }
}

export class UpdateTransferRestrictionsCall__Inputs {
  _call: UpdateTransferRestrictionsCall;

  constructor(call: UpdateTransferRestrictionsCall) {
    this._call = call;
  }

  get _newRestrictionsAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateTransferRestrictionsCall__Outputs {
  _call: UpdateTransferRestrictionsCall;

  constructor(call: UpdateTransferRestrictionsCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class LockCall extends ethereum.Call {
  get inputs(): LockCall__Inputs {
    return new LockCall__Inputs(this);
  }

  get outputs(): LockCall__Outputs {
    return new LockCall__Outputs(this);
  }
}

export class LockCall__Inputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get releaseTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LockCall__Outputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RevokeCall extends ethereum.Call {
  get inputs(): RevokeCall__Inputs {
    return new RevokeCall__Inputs(this);
  }

  get outputs(): RevokeCall__Outputs {
    return new RevokeCall__Outputs(this);
  }
}

export class RevokeCall__Inputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RevokeCall__Outputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AddWhitelisterCall extends ethereum.Call {
  get inputs(): AddWhitelisterCall__Inputs {
    return new AddWhitelisterCall__Inputs(this);
  }

  get outputs(): AddWhitelisterCall__Outputs {
    return new AddWhitelisterCall__Outputs(this);
  }
}

export class AddWhitelisterCall__Inputs {
  _call: AddWhitelisterCall;

  constructor(call: AddWhitelisterCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddWhitelisterCall__Outputs {
  _call: AddWhitelisterCall;

  constructor(call: AddWhitelisterCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
